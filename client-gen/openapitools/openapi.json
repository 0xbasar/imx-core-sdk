{
  "swagger": "2.0",
  "info": {
    "title": "Immutable X API",
    "contact": {
      "name": "Immutable API Support",
      "email": "support@immutable.com"
    },
    "version": "0.1"
  },
  "host": "api.ropsten.x.immutable.com",
  "basePath": "/",
  "paths": {
    "/v1/applications": {
      "get": {
        "description": "Get a list of applications",
        "produces": ["application/json"],
        "tags": ["applications"],
        "summary": "Get a list of applications",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListApplicationsResponse"
            }
          }
        }
      }
    },
    "/v1/applications/{id}": {
      "get": {
        "description": "Get details of an application with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["applications"],
        "summary": "Get details of an application with the given ID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "Application ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Application"
            }
          }
        }
      }
    },
    "/v1/assets": {
      "get": {
        "description": "Get a list of assets",
        "produces": ["application/json"],
        "tags": ["assets"],
        "summary": "Get a list of assets",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": ["updated_at", "name"],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who owns these assets",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of these assets",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Name of the asset to search",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for these asset",
            "name": "metadata",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of sell order details with accepted status associated with the asset",
            "name": "sell_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to true to fetch an array of buy order details  with accepted status associated with the asset",
            "name": "buy_orders",
            "in": "query"
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "collection",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for when these assets were last updated",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for when these assets were last updated",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListAssetsResponse"
            }
          }
        }
      }
    },
    "/v1/assets/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of an asset",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["assets"],
        "summary": "Get details of an asset",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Either ERC721 token ID or internal IMX ID",
            "name": "token_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to include fees associated with the asset",
            "name": "include_fees",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Asset"
            }
          }
        }
      }
    },
    "/v1/balances/{owner}": {
      "get": {
        "description": "Fetches the WEI balances of the user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["balances"],
        "summary": "Fetches the WEI balances of the user",
        "parameters": [
          {
            "type": "string",
            "description": "address of the owner/user",
            "name": "owner",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetBalanceResponse"
            }
          }
        }
      }
    },
    "/v1/claims/{etherKey}/{tokenAddress}": {
      "get": {
        "description": "Get TLV information for a user for a token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tlvs"],
        "summary": "Get TLV information for a user for a token",
        "parameters": [
          {
            "type": "string",
            "description": "User's wallet address",
            "name": "etherKey",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Token address",
            "name": "tokenAddress",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/core.GetTLVsResponse"
            }
          }
        }
      }
    },
    "/v1/collections": {
      "get": {
        "description": "Get a list of collections",
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Get a list of collections",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "List of collections not to be displayed, separated by commas",
            "name": "blacklist",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListCollectionsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create collection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Create collection",
        "parameters": [
          {
            "description": "create a collection",
            "name": "CreateCollection",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateCollectionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/api.Collection"
            },
            "headers": {
              "Collection_Limit": {
                "type": "string",
                "description": "The collection limit available to the project for each four-week window."
              },
              "Collection_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Collection_Remaining": {
                "type": "string",
                "description": "The amount of collections remaining for current four-week window."
              }
            }
          }
        }
      }
    },
    "/v1/collections/{address}": {
      "get": {
        "description": "Get details of a collection at the given address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Get details of a collection at the given address",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Collection"
            }
          }
        }
      },
      "patch": {
        "description": "Update collection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Update collection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "update a collection",
            "name": "UpdateCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.UpdateCollectionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Collection"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/filters": {
      "get": {
        "description": "Get a list of collection filters",
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Get a list of collection filters",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Next page token",
            "name": "next_page_token",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CollectionFilter"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema": {
      "get": {
        "description": "Get collection metadata schema",
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Get collection metadata schema",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "array",
              "items": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/api.MetadataSchemaProperty"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Add metadata schema to collection",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["collections"],
        "summary": "Add metadata schema to collection",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "description": "add metadata schema to a collection",
            "name": "AddMetadataSchemaToCollectionRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.AddMetadataSchemaToCollectionRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/response.SuccessResponse"
            }
          }
        }
      }
    },
    "/v1/collections/{address}/metadata-schema/{name}": {
      "patch": {
        "description": "Update metadata schema by name",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["collections", "metadata"],
        "summary": "Update metadata schema by name",
        "parameters": [
          {
            "type": "string",
            "description": "Collection contract address",
            "name": "address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Metadata schema name",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "description": "update metadata schema",
            "name": "MetadataSchemaRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.MetadataSchemaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/response.SuccessResponse"
            }
          }
        }
      }
    },
    "/v1/deposits": {
      "get": {
        "description": "Get a list of deposits",
        "produces": ["application/json"],
        "tags": ["deposits"],
        "summary": "Get a list of deposits",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this deposit",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this deposit",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the deposited asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the deposited asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the deposited asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the deposited asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the deposited asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the deposited asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListDepositsResponse"
            }
          }
        }
      }
    },
    "/v1/deposits/{id}": {
      "get": {
        "description": "Get details of a deposit with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["deposits"],
        "summary": "Get details of a deposit with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Deposit ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Deposit"
            }
          }
        }
      }
    },
    "/v1/mintable-token/{id}": {
      "get": {
        "description": "Get details of a mintable token with the given IMX token ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Get details of a mintable token with the given IMX token ID",
        "deprecated": true,
        "parameters": [
          {
            "type": "string",
            "description": "IMX ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.MintableTokenDetails"
            }
          }
        }
      }
    },
    "/v1/mintable-token/{token_address}/{token_id}": {
      "get": {
        "description": "Get details of a mintable token with the given token address and token ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Get details of a mintable token with the given token address and token ID",
        "parameters": [
          {
            "type": "string",
            "description": "Address of the ERC721 contract",
            "name": "token_address",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "ERC721 token ID",
            "name": "token_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.MintableTokenDetails"
            }
          }
        }
      }
    },
    "/v1/mints": {
      "get": {
        "description": "Get a list of mints",
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Get a list of mints",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this mint",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this mint",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this mint",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this mint",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the minted asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token Name of the minted asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the minted asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the minted asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the minted asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the minted asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListMintsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Mint tokens in a batch",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Mint tokens",
        "parameters": [
          {
            "description": "details of tokens to mint",
            "name": "MintTokensRequestV1",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.MintTokensRequestV1"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.MintTokensResponseV1"
            },
            "headers": {
              "Mint_Limit": {
                "type": "string",
                "description": "The mint limit available to the project for each four-week window."
              },
              "Mint_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Mint_Remaining": {
                "type": "string",
                "description": "The amount of mints remaining for current four-week window."
              }
            }
          }
        }
      }
    },
    "/v1/mints/{id}": {
      "get": {
        "description": "Get details of a mint with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Get details of a mint with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Mint ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Mint"
            }
          }
        }
      }
    },
    "/v1/orders": {
      "get": {
        "description": "Get a list of orders",
        "tags": ["orders"],
        "summary": "Get a list of orders",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "enum": [
              "created_at",
              "expired_at",
              "sell_quantity",
              "buy_quantity",
              "updated_at"
            ],
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this order",
            "name": "user",
            "in": "query"
          },
          {
            "enum": ["active", "filled", "cancelled", "expired", "inactive"],
            "type": "string",
            "description": "Status of this order",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum created at timestamp for this order",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum created at timestamp for this order",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum updated at timestamp for this order",
            "name": "updated_min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum updated at timestamp for this order",
            "name": "updated_max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order buys",
            "name": "buy_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order buys",
            "name": "buy_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order buys",
            "name": "buy_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of token addresses of the asset this order buys",
            "name": "buy_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order buys",
            "name": "buy_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order buys",
            "name": "buy_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order buys",
            "name": "buy_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order buys",
            "name": "buy_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the asset this order sells",
            "name": "sell_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the asset this order sells",
            "name": "sell_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the asset this order sells",
            "name": "sell_asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of token addresses of the asset this order sells",
            "name": "sell_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the asset this order sells",
            "name": "sell_token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the asset this order sells",
            "name": "sell_min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the asset this order sells",
            "name": "sell_max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the asset this order sells",
            "name": "sell_metadata",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListOrdersResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create an order",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["orders"],
        "summary": "Create an order",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create an order",
            "name": "CreateOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orders.CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CreateOrderResponse"
            }
          }
        }
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "description": "Get details of an order with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["orders"],
        "summary": "Get details of an order with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Order ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "Set flag to include fee body for the order",
            "name": "include_fees",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee percentages that are to be paired with auxiliary_fee_recipients",
            "name": "auxiliary_fee_percentages",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated string of fee recipients that are to be paired with auxiliary_fee_percentages",
            "name": "auxiliary_fee_recipients",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Order"
            }
          }
        }
      },
      "delete": {
        "description": "Cancel an order",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["orders"],
        "summary": "cancel an order",
        "parameters": [
          {
            "description": "cancel an order",
            "name": "CancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/orders.CancelOrderRequest"
            }
          },
          {
            "type": "string",
            "description": "Order ID to cancel",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CancelOrderResponse"
            }
          }
        }
      }
    },
    "/v1/projects": {
      "get": {
        "description": "Get projects",
        "consumes": ["application/json"],
        "tags": ["projects"],
        "summary": "Get projects",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetProjectsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a project",
        "consumes": ["application/json"],
        "tags": ["projects"],
        "summary": "Create a project",
        "parameters": [
          {
            "description": "create a project",
            "name": "CreateProjectRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.CreateProjectRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/api.CreateProjectResponse"
            }
          }
        }
      }
    },
    "/v1/projects/{id}": {
      "get": {
        "description": "Get a project",
        "consumes": ["application/json"],
        "tags": ["projects"],
        "summary": "Get a project",
        "parameters": [
          {
            "type": "string",
            "description": "Project ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Project"
            }
          }
        }
      }
    },
    "/v1/rewards": {
      "post": {
        "description": "Distribute campaign rewards",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["claims"],
        "summary": "User claim to redeem campaign rewards",
        "parameters": [
          {
            "description": "details of claim",
            "name": "ClaimRewardRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/core.ClaimRewardRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ClaimRewardResponse"
            }
          }
        }
      }
    },
    "/v1/rewards/{etherKey}": {
      "get": {
        "description": "Get list of claims a user can make to redeem campaign rewards",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["claims"],
        "summary": "Get list of reward claims for a user",
        "parameters": [
          {
            "type": "string",
            "description": "User's wallet address",
            "name": "etherKey",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/core.ListRewardsResponse"
            }
          }
        }
      }
    },
    "/v1/signable-deposit-details": {
      "post": {
        "description": "Gets details of a signable deposit",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["deposits"],
        "summary": "Gets details of a signable deposit",
        "parameters": [
          {
            "description": "get details of signable deposit",
            "name": "GetSignableDepositRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.GetSignableDepositRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableDepositResponse"
            }
          }
        }
      }
    },
    "/v1/signable-order-details": {
      "post": {
        "description": "Get details a signable cancel order",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["orders"],
        "summary": "Get details a signable cancel order",
        "parameters": [
          {
            "description": "get a signable cancel order",
            "name": "GetSignableCancelOrderRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.GetSignableCancelOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableCancelOrderResponse"
            }
          }
        }
      }
    },
    "/v1/signable-registration": {
      "post": {
        "description": "Get operator signature to allow clients to register the user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Get operator signature to allow clients to register the user",
        "parameters": [
          {
            "description": "Register User",
            "name": "GetSignableRegistrationRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/core.GetSignableRegistrationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableRegistrationResponse"
            }
          }
        }
      }
    },
    "/v1/signable-transfer-details": {
      "post": {
        "description": "Gets details of a signable transfer",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Gets details of a signable transfer",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.GetSignableTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableTransferResponse"
            }
          }
        }
      }
    },
    "/v1/signable-withdrawal-details": {
      "post": {
        "description": "Gets details of a signable withdrawal",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["withdrawals"],
        "summary": "Gets details of a signable withdrawal",
        "parameters": [
          {
            "description": "get details of signable withdrawal",
            "name": "GetSignableWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.GetSignableWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/snapshot/balances/{tokenAddress}": {
      "post": {
        "description": "Get a list of snapshot balances",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["snapshot"],
        "summary": "Get a snapshot at a specific block",
        "parameters": [
          {
            "description": "req",
            "name": "GetSnapshotRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/snapshot.GetSnapshotRequest"
            }
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "token address to list snapshot balances for",
            "name": "tokenAddress",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListSnapshotBalancesResponse"
            }
          }
        }
      }
    },
    "/v1/tokens": {
      "get": {
        "description": "Get a list of tokens",
        "produces": ["application/json"],
        "tags": ["tokens"],
        "summary": "Get a list of tokens",
        "parameters": [
          {
            "type": "string",
            "description": "Contract address of the token",
            "name": "address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token symbols for the token, e.g. ?symbols=IMX,ETH",
            "name": "symbols",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListTokensResponse"
            }
          }
        }
      }
    },
    "/v1/tokens/{address}": {
      "get": {
        "description": "Get details of an token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tokens"],
        "summary": "Get details of an token",
        "parameters": [
          {
            "type": "string",
            "description": "Token Contract Address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.TokenDetails"
            }
          }
        }
      }
    },
    "/v1/trades": {
      "get": {
        "description": "Get a list of trades",
        "produces": ["application/json"],
        "tags": ["trades"],
        "summary": "Get a list of trades",
        "parameters": [
          {
            "type": "string",
            "description": "Party A's sell token type",
            "name": "party_a_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party A's sell token address",
            "name": "party_a_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party A's sell token id",
            "name": "party_a_token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token type",
            "name": "party_b_token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token address",
            "name": "party_b_token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Party B's sell token id",
            "name": "party_b_token_id",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this trade",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this trade",
            "name": "max_timestamp",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListTradesResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a Trade",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["trades"],
        "summary": "Create a Trade between two parties",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create a trade",
            "name": "CreateTradeRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/trades.CreateTradeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CreateTradeResponse"
            }
          }
        }
      }
    },
    "/v1/trades/{id}": {
      "get": {
        "description": "Get details of a trade with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["trades"],
        "summary": "Get details of a trade with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Trade ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Trade"
            }
          }
        }
      }
    },
    "/v1/transfers": {
      "get": {
        "description": "Get a list of transfers",
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Get a list of transfers",
        "parameters": [
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this transfer",
            "name": "user",
            "in": "query"
          },
          {
            "enum": ["success", "failure"],
            "type": "string",
            "description": "Status of this transfer",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this transfer",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this transfer",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the transferred asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the transferred asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the transferred asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the transferred asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the transferred asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListTransfersResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new transfer request",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Creates a transfer of tokens between two parties",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transfers.CreateTransferRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CreateTransferResponse"
            }
          }
        }
      }
    },
    "/v1/transfers/{id}": {
      "get": {
        "description": "Get details of a transfer with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Get details of a transfer with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Transfer ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Transfer"
            }
          }
        }
      }
    },
    "/v1/users": {
      "post": {
        "description": "Registers a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Registers a user",
        "parameters": [
          {
            "description": "Register User",
            "name": "RegisterUserRequestVerifyEth",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/core.RegisterUserRequestVerifyEth"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.RegisterUserResponse"
            }
          }
        }
      }
    },
    "/v1/users/{user}": {
      "get": {
        "description": "Get stark keys for a registered user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Get stark keys for a registered user",
        "parameters": [
          {
            "type": "string",
            "description": "User",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetUsersApiResponse"
            }
          }
        }
      }
    },
    "/v1/withdrawals": {
      "get": {
        "description": "Get a list of withdrawals",
        "produces": ["application/json"],
        "tags": ["withdrawals"],
        "summary": "Get a list of withdrawals",
        "parameters": [
          {
            "type": "boolean",
            "description": "Withdrawal has been transferred to user's Layer 1 wallet",
            "name": "withdrawn_to_wallet",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of the on-chain batch confirmation for this withdrawal",
            "name": "rollup_status",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page size of the result",
            "name": "page_size",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Cursor",
            "name": "cursor",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Property to sort by",
            "name": "order_by",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Direction to sort (asc/desc)",
            "name": "direction",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Ethereum address of the user who submitted this withdrawal",
            "name": "user",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Status of this withdrawal",
            "name": "status",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Minimum timestamp for this deposit",
            "name": "min_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Maximum timestamp for this deposit",
            "name": "max_timestamp",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token type of the withdrawn asset",
            "name": "token_type",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ERC721 Token ID of the minted asset",
            "name": "token_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Internal IMX ID of the minted asset",
            "name": "asset_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token address of the withdrawn asset",
            "name": "token_address",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Token name of the withdrawn asset",
            "name": "token_name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Min quantity for the withdrawn asset",
            "name": "min_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Max quantity for the withdrawn asset",
            "name": "max_quantity",
            "in": "query"
          },
          {
            "type": "string",
            "description": "JSON-encoded metadata filters for the withdrawn asset",
            "name": "metadata",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListWithdrawalsResponse"
            }
          }
        }
      },
      "post": {
        "description": "Creates a withdrawal",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["withdrawals"],
        "summary": "Creates a withdrawal of a token",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "create a withdrawal",
            "name": "CreateWithdrawalRequest",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/withdrawal.CreateWithdrawalRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CreateWithdrawalResponse"
            }
          }
        }
      }
    },
    "/v1/withdrawals/{id}": {
      "get": {
        "description": "Gets details of withdrawal with the given ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["withdrawals"],
        "summary": "Gets details of withdrawal with the given ID",
        "parameters": [
          {
            "type": "string",
            "description": "Withdrawal ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.Withdrawal"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}": {
      "get": {
        "description": "Get a list of balances for given user",
        "produces": ["application/json"],
        "tags": ["balances"],
        "summary": "Get a list of balances for given user",
        "parameters": [
          {
            "type": "string",
            "description": "ethereum wallet address for user",
            "name": "owner",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.ListBalancesResponse"
            }
          }
        }
      }
    },
    "/v2/balances/{owner}/{address}": {
      "get": {
        "description": "Fetches the token balances of the user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["balances"],
        "summary": "Fetches the token balances of the user",
        "parameters": [
          {
            "type": "string",
            "description": "address of the owner/user",
            "name": "owner",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "token address",
            "name": "address",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetBalanceResponse"
            }
          }
        }
      }
    },
    "/v2/mints": {
      "post": {
        "description": "Mint tokens in a batch with fees",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["mints"],
        "summary": "Mint Tokens V2",
        "parameters": [
          {
            "description": "details of tokens to mint",
            "name": "MintTokensRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/api.MintRequestV2"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.MintTokensResponseV2"
            },
            "headers": {
              "Mint_Limit": {
                "type": "string",
                "description": "The mint limit available to the project for each four-week window."
              },
              "Mint_Limit_Reset": {
                "type": "string",
                "description": "The expiry date of the current four-week window."
              },
              "Mint_Remaining": {
                "type": "string",
                "description": "The amount of mints remaining for current four-week window."
              }
            }
          }
        }
      }
    },
    "/v2/signable-transfer-details": {
      "post": {
        "description": "Gets bulk details of a signable transfer",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Gets bulk details of a signable transfer",
        "parameters": [
          {
            "description": "get details of signable transfer",
            "name": "GetSignableTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/api.GetSignableTransferRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.GetSignableTransferResponseV2"
            }
          }
        }
      }
    },
    "/v2/transfers": {
      "post": {
        "description": "Create a new transfer request",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["transfers"],
        "summary": "Creates a transfer of multiple tokens between two parties",
        "operationId": "CreateTransferV2",
        "parameters": [
          {
            "type": "string",
            "description": "eth address",
            "name": "x-imx-eth-address",
            "in": "header"
          },
          {
            "type": "string",
            "description": "eth signature",
            "name": "x-imx-eth-signature",
            "in": "header"
          },
          {
            "description": "Create transfer",
            "name": "CreateTransferRequestV2",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/transfers.CreateTransferRequestV2"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/api.CreateTransferResponseV2"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "api.AddMetadataSchemaToCollectionRequest": {
      "type": "object",
      "required": ["metadata"],
      "properties": {
        "contract_address": {
          "description": "Not required from API user",
          "type": "string"
        },
        "metadata": {
          "description": "The metadata container",
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/api.MetadataSchemaRequest"
          }
        }
      }
    },
    "api.Application": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "Time this application was created",
          "type": "string"
        },
        "id": {
          "description": "ID of the application",
          "type": "string"
        },
        "name": {
          "description": "Name of the application",
          "type": "string"
        }
      }
    },
    "api.Asset": {
      "type": "object",
      "properties": {
        "collection": {
          "description": "Information about the collection to which this asset belongs",
          "$ref": "#/definitions/api.CollectionDetails"
        },
        "created_at": {
          "description": "Timestamp of when the asset was created",
          "type": "string"
        },
        "description": {
          "description": "Description of this NFT",
          "type": "string"
        },
        "fees": {
          "description": "Royalties to pay on this asset operations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Fee"
          }
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "image_url": {
          "description": "URL of the image which should be used for this asset",
          "type": "string"
        },
        "metadata": {
          "description": "Metadata of this asset",
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "name": {
          "description": "Name of this NFT",
          "type": "string"
        },
        "orders": {
          "description": "Open orders for this asset",
          "$ref": "#/definitions/api.OrderDetails"
        },
        "status": {
          "description": "Status of this asset (where it is in the system)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID of this asset",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp of when the asset was created",
          "type": "string"
        },
        "uri": {
          "description": "URI to access this asset externally to Immutable X",
          "type": "string"
        },
        "user": {
          "description": "Ethereum address of the user who owns this asset",
          "type": "string"
        }
      }
    },
    "api.AssetProperties": {
      "type": "object",
      "properties": {
        "collection": {
          "description": "Details of this asset's collection",
          "$ref": "#/definitions/api.CollectionDetails"
        },
        "image_url": {
          "description": "Image URL of this asset",
          "type": "string"
        },
        "name": {
          "description": "Name of this asset",
          "type": "string"
        }
      }
    },
    "api.Balance": {
      "type": "object",
      "properties": {
        "balance": {
          "description": "Amount which is currently inside the exchange",
          "type": "string"
        },
        "preparing_withdrawal": {
          "description": "Amount which is currently preparing withdrawal from the exchange",
          "type": "string"
        },
        "symbol": {
          "description": "Symbol of the token (e.g. ETH, IMX)",
          "type": "string"
        },
        "withdrawable": {
          "description": "Amount which is currently withdrawable from the exchange",
          "type": "string"
        }
      }
    },
    "api.CancelOrderResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "description": "ID of the cancelled order",
          "type": "integer"
        },
        "status": {
          "description": "New status of the order",
          "type": "string"
        }
      }
    },
    "api.ClaimRewardResponse": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "amount": {
          "type": "string"
        },
        "asset": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "api.Collection": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "project_id": {
          "description": "The collection's project ID",
          "type": "integer"
        }
      }
    },
    "api.CollectionDetails": {
      "type": "object",
      "properties": {
        "icon_url": {
          "description": "URL of the icon of the collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "api.CollectionFilter": {
      "type": "object",
      "properties": {
        "key": {
          "description": "Key of this property",
          "type": "string"
        },
        "range": {
          "description": "Range of values for this property",
          "$ref": "#/definitions/api.Range"
        },
        "type": {
          "description": "Type of this filter",
          "type": "string"
        },
        "value": {
          "description": "List of possible values for this property",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "api.CreateCollectionRequest": {
      "type": "object",
      "required": ["contract_address", "name", "owner_public_key"],
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "contract_address": {
          "description": "Ethereum address of the ERC721 contract",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        },
        "owner_public_key": {
          "description": "Owner Public Key: The public key of the owner of the contract",
          "type": "string"
        }
      }
    },
    "api.CreateOrderResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "description": "ID of the created order",
          "type": "integer"
        },
        "status": {
          "description": "Status of the created order",
          "type": "string"
        },
        "time": {
          "description": "Timestamp of the created order",
          "type": "integer"
        }
      }
    },
    "api.CreateProjectRequest": {
      "type": "object",
      "required": ["company_name", "contact_email", "name"],
      "properties": {
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email",
          "type": "string"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        }
      }
    },
    "api.CreateProjectResponse": {
      "type": "object",
      "properties": {
        "id": {
          "description": "The project ID",
          "type": "integer"
        }
      }
    },
    "api.CreateTradeResponse": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Current status of trade",
          "type": "string"
        },
        "trade_id": {
          "description": "ID of trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "api.CreateTransferResponse": {
      "type": "object",
      "properties": {
        "sent_signature": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "time": {
          "type": "integer"
        },
        "transfer_id": {
          "type": "integer"
        }
      }
    },
    "api.CreateTransferResponseV2": {
      "type": "object",
      "properties": {
        "transfer_ids": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    },
    "api.CreateWithdrawalResponse": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of the withdrawal",
          "type": "string"
        },
        "time": {
          "description": "Time of the withdrawal",
          "type": "integer"
        },
        "withdrawal_id": {
          "description": "ID of the withdrawal",
          "type": "integer"
        }
      }
    },
    "api.Deposit": {
      "type": "object",
      "properties": {
        "status": {
          "description": "Status of this deposit in Immutable X",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the deposit",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset being deposited",
          "$ref": "#/definitions/api.Token"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction within Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user making this deposit",
          "type": "string"
        }
      }
    },
    "api.Fee": {
      "type": "object",
      "required": ["address", "percentage", "type"],
      "properties": {
        "address": {
          "type": "string"
        },
        "percentage": {
          "description": "max of 100 = float representation of 100% fee to 2 d.p. precision",
          "type": "number",
          "maximum": 100
        },
        "type": {
          "type": "string"
        }
      }
    },
    "api.GetBalanceResponse": {
      "type": "object",
      "properties": {
        "imx": {
          "description": "Amount which is currently inside the exchange",
          "type": "string"
        },
        "preparing_withdrawal": {
          "description": "Amount which is currently preparing withdrawal from the exchange",
          "type": "string"
        },
        "withdrawable": {
          "description": "Amount which is currently withdrawable from the exchange",
          "type": "string"
        }
      }
    },
    "api.GetProjectsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Projects matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Project"
          }
        }
      }
    },
    "api.GetSignableCancelOrderRequest": {
      "type": "object",
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        }
      }
    },
    "api.GetSignableCancelOrderResponse": {
      "type": "object",
      "properties": {
        "order_id": {
          "description": "ID of the order to be cancelled",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for cancel order",
          "type": "string"
        }
      }
    },
    "api.GetSignableDepositRequest": {
      "type": "object",
      "required": ["amount", "token", "user"],
      "properties": {
        "amount": {
          "description": "Amount of the token the user is depositing",
          "type": "string"
        },
        "token": {
          "description": "Details of the token the user is depositing",
          "$ref": "#/definitions/core.Token"
        },
        "user": {
          "description": "User who is depositing",
          "type": "string"
        }
      }
    },
    "api.GetSignableDepositResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount this user is depositing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset this user is depositing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the deposit",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the depositing user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault this user is depositing to",
          "type": "integer"
        }
      }
    },
    "api.GetSignableOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "token_buy",
        "token_sell",
        "user"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "ExpirationTimestamp in Unix time. Note: will be rounded down to the nearest hour",
          "type": "integer"
        },
        "fees": {
          "description": "Inclusion of either maker or taker fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/types.FeeEntry"
          }
        },
        "include_fees": {
          "type": "boolean"
        },
        "token_buy": {
          "description": "Token to buy",
          "$ref": "#/definitions/core.Token"
        },
        "token_sell": {
          "description": "Token to sell",
          "$ref": "#/definitions/core.Token"
        },
        "user": {
          "description": "Ethereum address of the submitting user",
          "type": "string"
        }
      }
    },
    "api.GetSignableOrderResponse": {
      "type": "object",
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fee_info": {
          "description": "Fee information",
          "$ref": "#/definitions/core.FeeInfo"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the created user",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "api.GetSignableRegistrationResponse": {
      "type": "object",
      "properties": {
        "operator_signature": {
          "description": "Signature from authorised operator",
          "type": "string"
        },
        "payload_hash": {
          "type": "string"
        }
      }
    },
    "api.GetSignableTransferRequest": {
      "type": "object",
      "required": ["amount", "receiver", "sender", "token"],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "token": {
          "description": "Token to transfer",
          "$ref": "#/definitions/core.Token"
        }
      }
    },
    "api.GetSignableTransferRequestV2": {
      "type": "object",
      "required": ["sender_ether_key", "signable_requests"],
      "properties": {
        "sender_ether_key": {
          "description": "Ethereum address of the transferring user",
          "type": "string"
        },
        "signable_requests": {
          "description": "List of signable transfer details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.SignableTransferDetailsV2"
          }
        }
      }
    },
    "api.GetSignableTransferResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Token in request to match in SDK implementation",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        }
      }
    },
    "api.GetSignableTransferResponseV2": {
      "type": "object",
      "required": ["sender_stark_key"],
      "properties": {
        "sender_stark_key": {
          "description": "Sender of the transfer",
          "type": "string"
        },
        "signable_responses": {
          "description": "List of transfer responses without the sender stark key",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.SignableTransferV2ResponseDetails"
          }
        }
      }
    },
    "api.GetSignableWithdrawalRequest": {
      "type": "object",
      "required": ["amount", "token", "user"],
      "properties": {
        "amount": {
          "description": "Amount of the token to withdraw",
          "type": "string"
        },
        "token": {
          "description": "Token to withdraw",
          "$ref": "#/definitions/core.Token"
        },
        "user": {
          "description": "User who is making the withdrawal",
          "type": "string"
        }
      }
    },
    "api.GetSignableWithdrawalResponse": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount of the token we are withdrawing",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to be withdrawn",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of this transaction",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Encoded payload hash",
          "type": "string"
        },
        "stark_key": {
          "description": "Public stark key of this user",
          "type": "string"
        },
        "vault_id": {
          "description": "ID of the vault we are withdrawing from",
          "type": "integer"
        }
      }
    },
    "api.GetUsersApiResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "description": "Accounts",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "api.ListApplicationsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Applications which match query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Application"
          }
        }
      }
    },
    "api.ListAssetsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Assets matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Asset"
          }
        }
      }
    },
    "api.ListBalancesResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "result": {
          "description": "Dictionary of tokens",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Balance"
          }
        }
      }
    },
    "api.ListCollectionsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Collections matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Collection"
          }
        }
      }
    },
    "api.ListDepositsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Deposits matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Deposit"
          }
        }
      }
    },
    "api.ListMintsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Mints matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Mint"
          }
        }
      }
    },
    "api.ListOrdersResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Orders matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Order"
          }
        }
      }
    },
    "api.ListSnapshotBalancesResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "records": {
          "description": "List of snapshot balance records",
          "type": "array",
          "items": {
            "$ref": "#/definitions/snapshot.SnapshotBalancesRecord"
          }
        }
      }
    },
    "api.ListTokensResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "result": {
          "description": "Tokens matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.TokenDetails"
          }
        }
      }
    },
    "api.ListTradesResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Trades matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Trade"
          }
        }
      }
    },
    "api.ListTransfersResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Transfers matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Transfer"
          }
        }
      }
    },
    "api.ListWithdrawalsResponse": {
      "type": "object",
      "properties": {
        "cursor": {
          "description": "Generated cursor returned by previous query",
          "type": "string"
        },
        "remaining": {
          "description": "Remaining results flag. 1: there are remaining results matching this query, 0: no remaining results",
          "type": "integer"
        },
        "result": {
          "description": "Withdrawals matching query parameters",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Withdrawal"
          }
        }
      }
    },
    "api.MetadataSchemaProperty": {
      "type": "object",
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\".\nSrc: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string"
        }
      }
    },
    "api.MetadataSchemaRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "filterable": {
          "description": "Sets the metadata as filterable",
          "type": "boolean"
        },
        "name": {
          "description": "Name of the metadata key",
          "type": "string"
        },
        "type": {
          "description": "Type of the metadata. Values: \"enum\", \"text\", \"boolean\", \"continuous\", \"discrete\" | Default: \"text\". Src: https://docs.x.immutable.com/docs/asset-metadata#property-type-mapping",
          "type": "string",
          "enum": ["enum", "text", "boolean", "continuous", "discrete"]
        }
      }
    },
    "api.Mint": {
      "type": "object",
      "properties": {
        "fees": {
          "description": "Fee details",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.Fee"
          }
        },
        "status": {
          "description": "Status of this mint",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this mint was initiated",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset which has been minted",
          "$ref": "#/definitions/api.Token"
        },
        "transaction_id": {
          "description": "Sequential ID of transaction in Immutable X",
          "type": "integer"
        },
        "user": {
          "description": "Ethereum address of the user to whom the asset has been minted",
          "type": "string"
        }
      }
    },
    "api.MintRequestV1": {
      "type": "object",
      "required": ["auth_signature", "tokens", "user"],
      "properties": {
        "auth_signature": {
          "description": "Signature from authorised minter",
          "type": "string"
        },
        "nonce": {
          "description": "Random nonce - must be unique",
          "type": "integer"
        },
        "tokens": {
          "description": "Tokens to mint",
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintTokens"
          }
        },
        "user": {
          "description": "Recipient of the assets",
          "type": "string"
        }
      }
    },
    "api.MintRequestV2": {
      "type": "object",
      "required": ["auth_signature", "contract_address", "users"],
      "properties": {
        "auth_signature": {
          "description": "Signature from authorised minter",
          "type": "string"
        },
        "contract_address": {
          "description": "minting contract",
          "type": "string"
        },
        "royalties": {
          "description": "Global contract-level royalty fees",
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintFee"
          }
        },
        "users": {
          "description": "Users to mint to",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.MintUser"
          }
        }
      }
    },
    "api.MintTokensRequestV1": {
      "type": "object",
      "required": ["mints"],
      "properties": {
        "mints": {
          "description": "Details of requested mints",
          "type": "array",
          "items": {
            "$ref": "#/definitions/api.MintRequestV1"
          }
        }
      }
    },
    "api.MintTokensResponseV1": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintResult"
          }
        }
      }
    },
    "api.MintTokensResponseV2": {
      "type": "object",
      "properties": {
        "results": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintResultV2Map"
          }
        }
      }
    },
    "api.MintUser": {
      "type": "object",
      "required": ["tokens", "user"],
      "properties": {
        "tokens": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintTokenDataV2"
          }
        },
        "user": {
          "type": "string"
        }
      }
    },
    "api.MintableTokenDetails": {
      "type": "object",
      "properties": {
        "blueprint": {
          "description": "Blueprint of this token",
          "type": "string"
        },
        "client_token_id": {
          "description": "ID provided by the client for this token",
          "type": "string"
        },
        "token_id": {
          "description": "IMX Id of this token",
          "type": "string"
        }
      }
    },
    "api.Order": {
      "type": "object",
      "properties": {
        "amount_sold": {
          "description": "Amount of the asset already sold by this order",
          "type": "string"
        },
        "buy": {
          "description": "Details of the asset being bought",
          "$ref": "#/definitions/api.Token"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp of this order",
          "type": "string"
        },
        "fees": {
          "description": "Fee information for the order",
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.OrderFeeInfo"
          }
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "sell": {
          "description": "Details of the asset being sold",
          "$ref": "#/definitions/api.Token"
        },
        "status": {
          "description": "Status of the order",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp this order was created",
          "type": "string"
        },
        "updated_timestamp": {
          "description": "Updated timestamp of this order",
          "type": "string"
        },
        "user": {
          "description": "Ethereum address of the user who submitted the order",
          "type": "string"
        }
      }
    },
    "api.OrderDetails": {
      "type": "object",
      "properties": {
        "buy_orders": {
          "description": "Buy orders for this asset",
          "type": "array",
          "items": {
            "description": "Metadata of this asset",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        },
        "sell_orders": {
          "description": "Sell orders for this asset",
          "type": "array",
          "items": {
            "description": "Metadata of this asset",
            "type": "array",
            "items": {
              "type": "integer"
            }
          }
        }
      }
    },
    "api.Project": {
      "type": "object",
      "properties": {
        "collection_limit_expires_at": {
          "description": "The current period expiry date for collection limit",
          "type": "string"
        },
        "collection_monthly_limit": {
          "description": "The total monthly collection limit",
          "type": "integer"
        },
        "collection_remaining": {
          "description": "The number of collection remaining in the current period",
          "type": "integer"
        },
        "company_name": {
          "description": "The company name",
          "type": "string"
        },
        "contact_email": {
          "description": "The project contact email",
          "type": "string"
        },
        "id": {
          "description": "The project ID",
          "type": "integer"
        },
        "mint_limit_expires_at": {
          "description": "The current period expiry date for mint operation limit",
          "type": "string"
        },
        "mint_monthly_limit": {
          "description": "The total monthly mint operation limit",
          "type": "integer"
        },
        "mint_remaining": {
          "description": "The number of mint operation remaining in the current period",
          "type": "integer"
        },
        "name": {
          "description": "The project name",
          "type": "string"
        }
      }
    },
    "api.Range": {
      "type": "object",
      "properties": {
        "max": {
          "description": "Maximum value",
          "type": "integer"
        },
        "min": {
          "description": "Minimum value",
          "type": "integer"
        }
      }
    },
    "api.RegisterUserResponse": {
      "type": "object",
      "properties": {
        "tx_hash": {
          "description": "Immutable signature authorising registration",
          "type": "string"
        }
      }
    },
    "api.SignableTransferDetailsV2": {
      "type": "object",
      "required": ["amount", "receiver", "token"],
      "properties": {
        "amount": {
          "description": "Amount of the token to transfer",
          "type": "string"
        },
        "receiver": {
          "description": "Ethereum address of the receiving user",
          "type": "string"
        },
        "token": {
          "description": "Token to transfer",
          "$ref": "#/definitions/core.Token"
        }
      }
    },
    "api.SignableTransferV2ResponseDetails": {
      "type": "object",
      "properties": {
        "amount": {
          "description": "Amount of the asset being transferred",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset being transferred",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Timestamp when this transfer will expire",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "payload_hash": {
          "description": "Hash of the payload to be signed for transfer",
          "type": "string"
        },
        "receiver_stark_key": {
          "description": "Receiver of the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault being transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault being transferred from",
          "type": "integer"
        },
        "token": {
          "description": "Token in request to match in SDK implementation",
          "$ref": "#/definitions/core.Token"
        }
      }
    },
    "api.Token": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Token details of this asset",
          "$ref": "#/definitions/api.TokenData"
        },
        "type": {
          "description": "Type of this asset",
          "type": "string"
        }
      }
    },
    "api.TokenData": {
      "type": "object",
      "properties": {
        "decimals": {
          "description": "Number of decimals supported by this asset",
          "type": "integer"
        },
        "id": {
          "description": "[DEPRECATED] Internal Immutable X Token ID",
          "type": "string"
        },
        "properties": {
          "description": "Properties of this asset",
          "$ref": "#/definitions/api.AssetProperties"
        },
        "quantity": {
          "description": "Quantity of this asset",
          "type": "string"
        },
        "token_address": {
          "description": "Address of ERC721/ERC20 contract",
          "type": "string"
        },
        "token_id": {
          "description": "ERC721 Token ID",
          "type": "string"
        }
      }
    },
    "api.TokenDetails": {
      "type": "object",
      "properties": {
        "decimals": {
          "description": "Number of decimals for token",
          "type": "string"
        },
        "image_url": {
          "description": "Url for the icon of the token",
          "type": "string"
        },
        "name": {
          "description": "Full name of the token (e.g. Ether)",
          "type": "string"
        },
        "quantum": {
          "description": "Quantum for token",
          "type": "string"
        },
        "symbol": {
          "description": "Ticker symbol for token (e.g. ETH/USDC/IMX)",
          "type": "string"
        },
        "token_address": {
          "description": "Address of the ERC721 contract",
          "type": "string"
        }
      }
    },
    "api.Trade": {
      "type": "object",
      "properties": {
        "a": {
          "description": "Side A of this trade",
          "$ref": "#/definitions/api.TradeSide"
        },
        "b": {
          "description": "Side B of this trade",
          "$ref": "#/definitions/api.TradeSide"
        },
        "status": {
          "description": "Status of this trade",
          "type": "string"
        },
        "timestamp": {
          "description": "Time this trade occurred",
          "type": "string"
        },
        "transaction_id": {
          "description": "Sequential ID of this trade within Immutable X",
          "type": "integer"
        }
      }
    },
    "api.TradeSide": {
      "type": "object",
      "properties": {
        "order_id": {
          "description": "The ID of the order involved in the trade",
          "type": "integer"
        },
        "sold": {
          "description": "The amount of that order's asset this trade sold",
          "type": "string"
        },
        "token_address": {
          "description": "The contract address of the token that this trade sold",
          "type": "string"
        },
        "token_id": {
          "description": "The ID of the token that this trade sold",
          "type": "string"
        },
        "token_type": {
          "description": "The type of the token that this trade sold",
          "type": "string"
        }
      }
    },
    "api.Transfer": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Token details of this asset",
          "$ref": "#/definitions/api.TokenData"
        },
        "receiver": {
          "description": "Ethereum address of the user who received this transfer",
          "type": "string"
        },
        "status": {
          "description": "Status of the transaction",
          "type": "string"
        },
        "timestamp": {
          "description": "Timestamp of the transfer",
          "type": "string"
        },
        "transaction_id": {
          "description": "Sequential transaction ID",
          "type": "integer"
        },
        "type": {
          "description": "Type of this asset",
          "type": "string"
        },
        "user": {
          "description": "Ethereum address of the user  who submitted this transfer",
          "type": "string"
        }
      }
    },
    "api.UpdateCollectionRequest": {
      "type": "object",
      "properties": {
        "collection_image_url": {
          "description": "URL of the tile image for this collection",
          "type": "string"
        },
        "description": {
          "description": "Description of the collection",
          "type": "string"
        },
        "icon_url": {
          "description": "URL of the icon for this collection",
          "type": "string"
        },
        "metadata_api_url": {
          "description": "URL of the metadata for this collection",
          "type": "string"
        },
        "name": {
          "description": "Name of the collection",
          "type": "string"
        }
      }
    },
    "api.Withdrawal": {
      "type": "object",
      "properties": {
        "rollup_status": {
          "description": "Status of the on-chain batch confirmation for this withdrawal",
          "type": "string"
        },
        "sender": {
          "description": "Ethereum address of the user who requested this withdrawal",
          "type": "string"
        },
        "status": {
          "description": "Status of this withdrawal",
          "type": "string"
        },
        "timestamp": {
          "description": "Time when this withdrawal was initiated",
          "type": "string"
        },
        "token": {
          "description": "Details of the asset this user is withdrawing",
          "$ref": "#/definitions/api.Token"
        },
        "transaction_id": {
          "description": "Sequential ID of this transaction",
          "type": "integer"
        },
        "withdrawn_to_wallet": {
          "description": "Withdrawal has been transferred to user's Layer 1 wallet",
          "type": "boolean"
        }
      }
    },
    "core.ClaimRewardRequest": {
      "type": "object",
      "required": ["eth_signature", "option"],
      "properties": {
        "eth_signature": {
          "type": "string"
        },
        "option": {
          "type": "string"
        }
      }
    },
    "core.FeeData": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "decimals": {
          "type": "integer"
        }
      }
    },
    "core.FeeInfo": {
      "type": "object",
      "required": ["asset_id", "fee_limit", "source_vault_id"],
      "properties": {
        "asset_id": {
          "type": "string"
        },
        "fee_limit": {
          "type": "string"
        },
        "source_vault_id": {
          "type": "integer"
        }
      }
    },
    "core.FeeToken": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/core.FeeData"
        },
        "type": {
          "type": "string",
          "enum": ["ETH", "ERC20"]
        }
      }
    },
    "core.GetSignableRegistrationRequest": {
      "type": "object",
      "required": ["ether_key", "stark_key"],
      "properties": {
        "ether_key": {
          "type": "string"
        },
        "stark_key": {
          "type": "string"
        }
      }
    },
    "core.GetTLVsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/core.GetTLVsResult"
        }
      }
    },
    "core.GetTLVsResult": {
      "type": "object",
      "properties": {
        "awaiting_cliff": {
          "type": "string"
        }
      }
    },
    "core.ListRewardsResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer"
        },
        "message": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/core.Reward"
        }
      }
    },
    "core.MintFee": {
      "type": "object",
      "required": ["percentage", "recipient"],
      "properties": {
        "percentage": {
          "description": "max of 100 = float representation of 100% fee to 2 d.p. precision",
          "type": "number",
          "maximum": 100
        },
        "recipient": {
          "type": "string"
        }
      }
    },
    "core.MintResult": {
      "type": "object",
      "properties": {
        "client_token_id": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "tx_id": {
          "type": "integer"
        }
      }
    },
    "core.MintResultV2Map": {
      "type": "object",
      "properties": {
        "contract_address": {
          "type": "string"
        },
        "token_id": {
          "type": "string"
        },
        "tx_id": {
          "type": "integer"
        }
      }
    },
    "core.MintTokenData": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "blueprint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        }
      }
    },
    "core.MintTokenDataV2": {
      "type": "object",
      "required": ["id"],
      "properties": {
        "blueprint": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "royalties": {
          "description": "overridable fees if specified",
          "type": "array",
          "items": {
            "$ref": "#/definitions/core.MintFee"
          }
        }
      }
    },
    "core.MintTokens": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/core.MintTokenData"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "core.OrderFeeInfo": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "token": {
          "$ref": "#/definitions/core.FeeToken"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "core.RegisterUserRequestVerifyEth": {
      "type": "object",
      "required": [
        "eth_signature",
        "ether_key",
        "stark_key",
        "stark_signature"
      ],
      "properties": {
        "eth_signature": {
          "type": "string"
        },
        "ether_key": {
          "type": "string"
        },
        "stark_key": {
          "type": "string"
        },
        "stark_signature": {
          "type": "string"
        }
      }
    },
    "core.Reward": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string"
        },
        "ether_key": {
          "type": "string"
        },
        "expiration_time": {
          "type": "string"
        },
        "points": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "token_address": {
          "type": "string"
        }
      }
    },
    "core.Token": {
      "type": "object",
      "properties": {
        "data": {},
        "type": {
          "type": "string",
          "example": "ETH/ERC20/ERC721"
        }
      }
    },
    "orders.CancelOrderRequest": {
      "type": "object",
      "required": ["order_id", "stark_signature"],
      "properties": {
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        }
      }
    },
    "orders.CreateOrderRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this order",
          "type": "integer"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/types.FeeEntry"
          }
        },
        "include_fees": {
          "description": "Whether to include fees in order",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating order",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the bought asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "response.SuccessResponse": {
      "type": "object",
      "properties": {
        "result": {
          "type": "string"
        }
      }
    },
    "snapshot.GetSnapshotRequest": {
      "type": "object",
      "properties": {
        "ether_keys": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "snapshot.SnapshotBalancesRecord": {
      "type": "object",
      "properties": {
        "balance": {
          "description": "User's IMX balance on Immutable at a snapshot block",
          "type": "string"
        },
        "ether_key": {
          "description": "User ethereum address",
          "type": "string"
        }
      }
    },
    "trades.CreateTradeRequest": {
      "type": "object",
      "required": [
        "amount_buy",
        "amount_sell",
        "asset_id_buy",
        "asset_id_sell",
        "expiration_timestamp",
        "nonce",
        "order_id",
        "stark_key",
        "stark_signature",
        "vault_id_buy",
        "vault_id_sell"
      ],
      "properties": {
        "amount_buy": {
          "description": "Amount to buy",
          "type": "string"
        },
        "amount_sell": {
          "description": "Amount to sell",
          "type": "string"
        },
        "asset_id_buy": {
          "description": "ID of the asset to buy",
          "type": "string"
        },
        "asset_id_sell": {
          "description": "ID of the asset to sell",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this trade",
          "type": "integer"
        },
        "fee_info": {
          "description": "Fee details",
          "$ref": "#/definitions/trades.FeeInfo"
        },
        "fees": {
          "description": "Fee information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/types.FeeEntry"
          }
        },
        "include_fees": {
          "description": "Whether to include fees in trade",
          "type": "boolean"
        },
        "nonce": {
          "description": "Nonce of the trade",
          "type": "integer"
        },
        "order_id": {
          "description": "ID of the order",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the user creating trade",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id_buy": {
          "description": "ID of the vault into which the traded asset will be placed",
          "type": "integer"
        },
        "vault_id_sell": {
          "description": "ID of the vault to sell from",
          "type": "integer"
        }
      }
    },
    "trades.FeeInfo": {
      "type": "object",
      "required": ["asset_id", "fee_limit", "source_vault_id"],
      "properties": {
        "asset_id": {
          "description": "ID of the asset these fees relate to",
          "type": "string"
        },
        "fee_limit": {
          "description": "Fee limit",
          "type": "string"
        },
        "source_vault_id": {
          "description": "ID of vault the asset belong to",
          "type": "integer"
        }
      }
    },
    "transfers.CreateTransferRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_stark_key",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "transfers.CreateTransferRequestV2": {
      "type": "object",
      "required": ["requests", "sender_stark_key"],
      "properties": {
        "requests": {
          "description": "List of transfers",
          "type": "array",
          "items": {
            "$ref": "#/definitions/transfers.TransferRequest"
          }
        },
        "sender_stark_key": {
          "description": "Public stark key of the user sending the transfer",
          "type": "string"
        }
      }
    },
    "transfers.TransferRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "expiration_timestamp",
        "nonce",
        "receiver_stark_key",
        "receiver_vault_id",
        "sender_vault_id",
        "stark_signature"
      ],
      "properties": {
        "amount": {
          "description": "Amount to transfer",
          "type": "string"
        },
        "asset_id": {
          "description": "ID of the asset to transfer",
          "type": "string"
        },
        "expiration_timestamp": {
          "description": "Expiration timestamp for this transfer",
          "type": "integer"
        },
        "nonce": {
          "description": "Nonce of the transfer",
          "type": "integer"
        },
        "receiver_stark_key": {
          "description": "Public stark key of the user receiving the transfer",
          "type": "string"
        },
        "receiver_vault_id": {
          "description": "ID of the vault into which the asset will be transferred to",
          "type": "integer"
        },
        "sender_vault_id": {
          "description": "ID of the vault into which the asset is from",
          "type": "integer"
        },
        "stark_signature": {
          "description": "Transfer payload signature",
          "type": "string"
        }
      }
    },
    "types.FeeEntry": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "fee_percentage": {
          "type": "number"
        }
      }
    },
    "withdrawal.CreateWithdrawalRequest": {
      "type": "object",
      "required": [
        "amount",
        "asset_id",
        "nonce",
        "stark_key",
        "stark_signature",
        "vault_id"
      ],
      "properties": {
        "amount": {
          "description": "Amount to withdraw",
          "type": "string"
        },
        "asset_id": {
          "description": "The ID of asset the user is withdrawing",
          "type": "string"
        },
        "nonce": {
          "description": "Nonce of the withdrawal",
          "type": "integer"
        },
        "stark_key": {
          "description": "Public stark key of the withdrawing user",
          "type": "string"
        },
        "stark_signature": {
          "description": "Payload signature",
          "type": "string"
        },
        "vault_id": {
          "description": "The ID of the vault the asset belong to",
          "type": "integer"
        }
      }
    }
  }
}
